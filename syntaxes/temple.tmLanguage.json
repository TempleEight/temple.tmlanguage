{
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#blockType"
        },
        {
            "include": "#attribute"
        },
        {
            "include": "#metadata"
        }
    ],
    "repository": {
        "annotation": {
            "match": "@[a-z][A-Za-z0-9_]*",
            "name": "keyword"
        },
        "argsList": {
            "begin": "\\(",
            "end": "\\)",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#token"
                },
                {
                    "include": "#numeric"
                },
                {
                    "include": "#param"
                }
            ]
        },
        "array": {
            "begin": "[",
            "captures": {
                "0": {
                    "name": "punctuation.paren"
                }
            },
            "end": "]"
        },
        "attribute": {
            "begin": "(?x)\n  ([a-z][A-Za-z0-9_]*) # field name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  : # colon\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  ([A-Za-z][A-Za-z0-9_]*) # type name\n",
            "beginCaptures": {
                "1": {
                    "name": "entity.name"
                },
                "2": {
                    "name": "comment.block"
                },
                "3": {
                    "name": "comment.block"
                },
                "4": {
                    "name": "entity.name.type"
                }
            },
            "end": "(?x)\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
            "patterns": [
                {
                    "include": "#argsList"
                },
                {
                    "include": "#annotation"
                },
                {
                    "include": "#comments"
                },
                {
                    "include": "#numeric"
                }
            ]
        },
        "blockType": {
            "captures": {
                "1": {
                    "name": "entity.name"
                },
                "2": {
                    "name": "comment.block"
                },
                "3": {
                    "name": "comment.block"
                },
                "4": {
                    "name": "entity.name.type"
                },
                "5": {
                    "name": "comment.block"
                }
            },
            "match": "(?x)\n  ([A-Z][A-Za-z0-9_]*) # class name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  : #colon\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  ([a-z][A-Za-z0-9_]*) # block type name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  \\{ # open brace\n"
        },
        "comma": {
            "captures": {
                "0": {}
            },
            "match": ","
        },
        "comments": {
            "patterns": [
                {
                    "match": "//.*",
                    "name": "comment.line.double-slash"
                },
                {
                    "match": "/\\*[\\s\\S]*?\\*/",
                    "name": "comment.block"
                }
            ]
        },
        "emptyMetadata": {
            "captures": {
                "1": {
                    "name": "keyword"
                }
            },
            "match": "(?x)\n  (\\#[a-z][A-Za-z0-9_]*) # hash followed by an identifier\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n"
        },
        "fullMetadata": {
            "begin": "(?x)\n  (\\#[a-z][A-Za-z0-9_]*) # hash followed by an identifier\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  \\( # open arg list\n",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                },
                "2": {
                    "name": "comment.block"
                },
                "3": {
                    "name": "comment.block"
                },
                "4": {
                    "name": "entity.name.type"
                },
                "5": {
                    "name": "comment.block"
                }
            },
            "end": "(?x)\n  \\) # close arg list\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
            "endCaptures": {
                "1": {
                    "name": "comment.block"
                }
            },
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#token"
                },
                {
                    "include": "#numeric"
                },
                {
                    "include": "#param"
                }
            ]
        },
        "metadata": {
            "patterns": [
                {
                    "include": "#fullMetadata"
                },
                {
                    "include": "#shorthandMetadata"
                },
                {
                    "include": "#emptyMetadata"
                }
            ]
        },
        "numeric": {
            "match": "[-+]?\\d+(\\.\\d+)?",
            "name": "constant.numeric"
        },
        "numeric2": {
            "match": "[-+]?\\d+(\\.\\d+)?",
            "name": "keyword"
        },
        "param": {
            "captures": {
                "1": {
                    "name": "variable.parameter"
                },
                "2": {
                    "name": "comment.block"
                },
                "3": {}
            },
            "match": "(?x)\n  ([a-zA-Z_][a-zA-Z_0-9]*) # identifier name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  : # colon\n"
        },
        "shorthandMetadata": {
            "begin": "(?x)\n  (\\#[a-z][A-Za-z0-9_]*) # hash followed by an identifier\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  \\[ # open shorthand\n",
            "beginCaptures": {
                "1": {
                    "name": "keyword"
                },
                "2": {
                    "name": "comment.block"
                },
                "3": {
                    "name": "comment.block"
                },
                "4": {
                    "name": "entity.name.type"
                },
                "5": {
                    "name": "comment.block"
                }
            },
            "end": "(?x)\n  \\] # close shorthand\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
            "endCaptures": {
                "1": {
                    "name": "comment.block"
                }
            },
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#token"
                },
                {
                    "include": "#numeric"
                }
            ]
        }
    },
    "scopeName": "root.temple"
}
