{
  "scopeName": "root.temple",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#blockType"
    },
    {
      "include": "#builtInAttribute"
    },
    {
      "include": "#userDefinedAttribute"
    },
    {
      "include": "#metadata"
    }
  ],
  "repository": {
    "blockType": {
      "match": "(?x)\n  ([A-Z][A-Za-z0-9_]*) # class name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  : #colon\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (target|project|service|struct) # block type name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  \\{ # open brace\n",
      "captures": {
        "1": {
          "name": "entity.name.class"
        },
        "2": {
          "name": "comment.block"
        },
        "3": {
          "name": "comment.block"
        },
        "4": {
          "name": "keyword.other"
        },
        "5": {
          "name": "comment.block"
        }
      }
    },
    "annotation": {
      "match": "@[a-z][A-Za-z0-9_]*",
      "name": "keyword"
    },
    "comments": {
      "patterns": [
        {
          "match": "//.*",
          "name": "comment.line.double-slash"
        },
        {
          "match": "/\\*[\\s\\S]*?\\*/",
          "name": "comment.block"
        }
      ]
    },
    "builtInAttribute": {
      "begin": "(?x)\n  ([a-z][A-Za-z0-9_]*) # field name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  : # colon\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (bool|string|int|float|datetime|date|time|data) # type name\n",
      "beginCaptures": {
        "1": {
          "name": "entity.name"
        },
        "2": {
          "name": "comment.block"
        },
        "3": {
          "name": "comment.block"
        },
        "4": {
          "name": "support.type"
        }
      },
      "end": "(?x)\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
      "patterns": [
        {
          "include": "#argsList"
        },
        {
          "include": "#annotation"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#numeric"
        }
      ]
    },
    "userDefinedAttribute": {
      "begin": "(?x)\n  ([a-z][A-Za-z0-9_]*) # field name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  : # colon\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  ([A-Z][A-Za-z0-9_]*) # type name\n",
      "beginCaptures": {
        "1": {
          "name": "entity.name"
        },
        "2": {
          "name": "comment.block"
        },
        "3": {
          "name": "comment.block"
        },
        "4": {
          "name": "entity.name.type"
        }
      },
      "end": "(?x)\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
      "patterns": [
        {
          "include": "#argsList"
        },
        {
          "include": "#annotation"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#numeric"
        }
      ]
    },
    "metadata": {
      "patterns": [
        {
          "include": "#fullMetadata"
        },
        {
          "include": "#shorthandMetadata"
        },
        {
          "include": "#emptyMetadata"
        }
      ]
    },
    "shorthandMetadata": {
      "begin": "(?x)\n  (\\#[a-z][A-Za-z0-9_]*) # hash followed by an identifier\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  \\[ # open shorthand\n",
      "beginCaptures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "comment.block"
        },
        "3": {
          "name": "comment.block"
        },
        "4": {
          "name": "entity.name.type"
        },
        "5": {
          "name": "comment.block"
        }
      },
      "end": "(?x)\n  \\] # close shorthand\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
      "endCaptures": {
        "1": {
          "name": "comment.block"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#token"
        },
        {
          "include": "#numeric"
        }
      ]
    },
    "fullMetadata": {
      "begin": "(?x)\n  (\\#[a-z][A-Za-z0-9_]*) # hash followed by an identifier\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  \\( # open arg list\n",
      "beginCaptures": {
        "1": {
          "name": "keyword"
        },
        "2": {
          "name": "comment.block"
        },
        "3": {
          "name": "comment.block"
        },
        "4": {
          "name": "entity.name.type"
        },
        "5": {
          "name": "comment.block"
        }
      },
      "end": "(?x)\n  \\) # close arg list\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
      "endCaptures": {
        "1": {
          "name": "comment.block"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#token"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#param"
        }
      ]
    },
    "emptyMetadata": {
      "match": "(?x)\n  (\\#[a-z][A-Za-z0-9_]*) # hash followed by an identifier\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  (;|(?=((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*))\\}) # semicolon or end of block\n",
      "captures": {
        "1": {
          "name": "keyword"
        }
      }
    },
    "argsList": {
      "begin": "\\(",
      "end": "\\)",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#token"
        },
        {
          "include": "#numeric"
        },
        {
          "include": "#param"
        }
      ]
    },
    "param": {
      "match": "(?x)\n  ([a-zA-Z_][a-zA-Z_0-9]*) # identifier name\n  ((?:\\s*(?:/\\*[\\s\\S]*?\\*/|//.*\\n))*\\s*) # space/comment?\n  : # colon\n",
      "captures": {
        "1": {
          "name": "variable.parameter"
        },
        "2": {
          "name": "comment.block"
        }
      }
    },
    "numeric": {
      "match": "[-+]?\\d+(\\.\\d+)?",
      "name": "constant.numeric"
    }
  }
}
